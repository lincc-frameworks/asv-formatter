import re

from tabulate import tabulate

from .asv_formatter import AsvFormatter


class TabulateFormatter(AsvFormatter):
    """The TabulateFormatter is used for asv < 0.6.0.

    It extracts the table from the ASV output file, clipping it to the maximum
    specified size. We then use tabulate to generate a GitHub style version of
    the output table.

    Typical ASV table file (before processing):

    All benchmarks:

            before           after        ratio
          [fcd6c976]       [bc939276]
          <main>           <test-pr>
                 2.1k             2.1k     1.00  benchmarks.MemSuite.mem_list
               failed          304±2ms      n/a  benchmarks.TimeSuite.time_iterkeys
          2.43±0.05μs        205±0.7ms 84400.48  benchmarks.TimeSuite.time_keys
          9.67±0.03μs          505±1ms 52177.14  benchmarks.TimeSuite.time_range
               failed          1.01±0s      n/a  benchmarks.TimeSuite.time_xrange

    Formatted ASV table file (GitHub style):
    | Before      | After       | Ratio    | Method                             |
    |-------------|-------------|----------|------------------------------------|
    | [fcd6c976]  | [bc939276]  |          |                                    |
    | 2.1k        | 2.1k        | 1.00     | benchmarks.MemSuite.mem_list       |
    | failed      | 304±2ms     | n/a      | benchmarks.TimeSuite.time_iterkeys |
    | 2.43±0.05μs | 205±0.7ms   | 84400.48 | benchmarks.TimeSuite.time_keys     |
    | 9.67±0.03μs | 505±1ms     | 52177.14 | benchmarks.TimeSuite.time_range    |
    | failed      | 1.01±0s     | n/a      | benchmarks.TimeSuite.time_xrange   |
    """

    OUTPUT_TABLE_STYLE = "github"

    def rewrite_file(self):
        """Reads ASV table and writes new file with transformed GitHub-styled table."""
        rows = self.extract_table_from_file()
        headers, rows = self.format_asv_table_from_file(rows)
        output = tabulate(rows, headers=headers, tablefmt=self.OUTPUT_TABLE_STYLE)
        self.write_output_to_file(output)

    def format_asv_table_from_file(self, rows):
        """Parses and formats a table generated by `asv compare`.

        Parameters
        ----------
        rows : list of str
            List of asv table rows.

        Returns
        -------
        tuple of str
            Headers and rows of the formatted table.
        """
        rows = self.parse_table_rows(rows)
        headers = self.format_headers(rows[0])
        branch_data, bench_data = [rows[1]], rows[2:]
        num_results = min(self.MAX_NUM_ROWS, len(bench_data))
        table_data = self.remove_first_column(bench_data[:num_results])
        return headers, branch_data + table_data

    def parse_table_rows(self, rows):
        """Splits the columns, for each row, by whitespace separator.

        Parameters
        ----------
        rows : list of str
            Lines read from a file.

        Returns
        -------
        list of lists
            List of columns for each row. The first three lines of the original
            file are ignored as they do not contain useful information.
        """
        return [re.split(r"\s+", row.strip()) for row in rows]

    def format_headers(self, headers):
        """Reads and capitalizes the table headers.

        Parameters
        ----------
        headers : list of str
            List of headers read from the file.

        Returns
        -------
        list of str
            Full list of capitalized table headers.
        """
        headers.append("method")
        return [header.capitalize() for header in headers]

    def remove_first_column(self, lines):
        """Discards the first column of the benchmarks table if it
        does not contain useful information ("+" / "-" / "x").

        Parameters
        ----------
        lines : list of lists
            Lines containing benchmark information.

        Returns
        -------
        list of lists
            Lines containing benchmark information.
        """
        return [line[1:] if len(line) > 4 else line for line in lines]
