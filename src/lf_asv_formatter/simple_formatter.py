import re

from .asv_formatter import AsvFormatter

# pylint: disable=line-too-long


class SimpleFormatter(AsvFormatter):
    """The SimpleFormatter is used for asv >= 0.6.0.

    It extracts the table from the ASV output file, clipping it to the maximum
    specified size. The table keeps its original GitHub styling.

    Typical ASV table file (before processing):

    All benchmarks:

    | Change   | Before [bd9dfcb0]    | After [65151fad]    | Ratio   | Benchmark (Parameter)              |
    |----------|----------------------|---------------------|---------|------------------------------------|
    |          | 2.67±0.3s            | 4.05±0.2s           | ~1.52   | benchmarks.TimeSuite.time_xrange   |
    |          | 1.97±1s              | 2.51±0.9s           | ~1.27   | benchmarks.TimeSuite.time_keys     |
    |          | 2.82±1s              | 1.95±0.8s           | ~0.69   | benchmarks.TimeSuite.time_iterkeys |
    | +        | 464                  | 3.89k               | 8.38    | benchmarks.MemSuite.mem_list       |
    |          | 3.00±0.5s            | 2.97±1s             | 0.99    | benchmarks.TimeSuite.time_range    |

    The output will be similar to:
    | Before [bd9dfcb0]    | After [65151fad]    | Ratio   | Benchmark (Parameter)              |
    |----------------------|---------------------|---------|------------------------------------|
    | 2.67±0.3s            | 4.05±0.2s           | ~1.52   | benchmarks.TimeSuite.time_xrange   |
    | 1.97±1s              | 2.51±0.9s           | ~1.27   | benchmarks.TimeSuite.time_keys     |
    | 2.82±1s              | 1.95±0.8s           | ~0.69   | benchmarks.TimeSuite.time_iterkeys |
    | 464                  | 3.89k               | 8.38    | benchmarks.MemSuite.mem_list       |
    | 3.00±0.5s            | 2.97±1s             | 0.99    | benchmarks.TimeSuite.time_range    |
    """

    def rewrite_file(self):
        """Reads ASV table and writes new file with transformed table."""
        rows = self.extract_table_from_file()
        output = self.format_asv_table_from_file(rows)
        self.write_output_to_file(output)

    def format_asv_table_from_file(self, rows):
        """Parses the table generated by `asv compare`, and clips the number of
        results to the maximum size, specified by MAX_NUM_ROWS.

        Parameters
        ----------
        rows : list of str
            List of asv table rows.

        Returns
        -------
        str
            The formatted asv table.
        """
        headers = self.parse_headers(rows[0])
        bench_data = rows[2:]
        max_row = min(self.MAX_NUM_ROWS, len(bench_data)) + 2
        if len(headers) > 4:
            # If number of columns > 4, there is a "Change"
            # column that we wish to discard
            rows = self.remove_first_column(rows)
        return "".join(map(str, rows[:max_row]))

    def parse_headers(self, headers_str):
        """Parses table headers using a regular expression.

        Parameters
        ----------
        headers_str: str
            The string with the labels and respective "|" delimiters.

        Returns
        -------
        list of str
            A list with the table headers.
        """
        # Regex iterator to find all columns between two "|" chars
        iterator = re.finditer(r"\|(.+?)(?=\|)", headers_str)
        return [match.group(1) for match in iterator]

    def remove_first_column(self, lines):
        """Discards the first column of the benchmarks table as it
        does not contain useful information ("+" / "-" / "x").

        Parameters
        ----------
        lines : list of lists
            Lines containing benchmark information.

        Returns
        -------
        list of lists
            Lines containing benchmark information.
        """
        return [re.sub(r"^\|(.*?\|)", r"|", line) for line in lines]
